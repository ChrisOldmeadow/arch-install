#+TITLE: Basic Arch install script
#+PROPERTY: header-args :tangle arch_install.sh :shebang "#!/bin/bash"

* Introduction

+ view the attached storage devices with lsblk
+ Set keyboard layout
+ verify boot mode (ls /sys/firmware/efi/efivars  # if this is empty then boot using BIOS)
+ connect to the internet (ip link)
+ Refresh the servers with pacman -Syy
+ update the system clock timedatectl set-ntp true

**  Partition the hard drives
I have the following setup:
- 2xNVME drives (/root and /home)
- 1 spinning disk (/data)
I will use the UEFI partitions
I will use fdisk to create 3 partitons on the /root disk
  1) /mnt/boot /dev/efi_system_partition (260MB)
  2) [SWAP] /dev/swap_partition (2GB)
  3) /mnt /dev/root_partition (root - remainder of device) - Im going to have home on a separate disk

    gdisk /dev/sda
    - first create a 300MB efi partition
    o
    n
    +300M
    ef00

    - next create a 2GB swap partition
      n
      +2GB
      8200
    - the last partition just accept all the defaults

      - write the changes to the disk 'w' and confirm



** format and mount

  + mkfs.vfat /dev/sda1 (EFI partition needs to be FAT32)
  + mkswap /dev/sda2
  + mkfs.btrfs /dev/sda3
  + mount /dev/root_partition /mnt
  + cd /mnt
  + btrfs subvolume create @

  ** Can also have a btrfs for a separate home disk

  + mkfs.bgtrf /dev/nvme1n1
  + cd ..
  + umount /mnt
  + mount /dev/home_partition /mnt
  + cd /mnt
  + btrfs subvolume create @home
  + btrfs subvolume create @var
  + cd ..
  + umount /mnt
  + mount -o noatime,compress=ztd,space_cache=v1,subvol=@ /dev/root_parition /mnt
  + mkdir {boot,home,var}
  + mount -o noatime,compress=ztd,space_cache=v1,subvol=@home /dev/home_parition /mnt/home
  + mount -o noatime,compress=ztd,space_cache=v1,subvol=@home /dev/home_parition /mnt/var /mnt/var
  + mount /dev/dev/efi_boot_parition /mnt/boot

  ** a Swap partition
  + swapon /dev/swap_partition

** installation of base packages into /mnt

+ pacstrap /mnt base base-devel linux linux-firmware dhcpcd wpa_supplicant vim git dialog man-db man-pages texinfo intel-ucode btrfs-progs


+ Generate the FSTAB file with genfstab -U /mnt >> /mnt/etc/fstab
+ Chroot in with arch-chroot /mnt
+ Download the git repository with git clone https://github.com/ChrisOldmeadow/arch_install

+ cd arch_install
+ chmod +x arch_install.sh
+ ./arch_install.sh

* The base install script

#+begin_src sh

ln -sf /usr/share/zoneinfo/Austrlia/Sydney /etc/localtime
hwclock --systohc
sed -i '177s/.//' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" >> /etc/locale.conf
echo "KEYMAP=en_US" >> /etc/vconsole.conf
echo "arch" >> /etc/hostname
echo "127.0.0.1 localhost" >> /etc/hosts
echo "::1       localhost" >> /etc/hosts
echo "127.0.1.1 arch.localdomain arch" >> /etc/hosts
echo root:password | chpasswd


pacman -S --noconfirm grub efibootmgr networkmanager network-manager-applet dialog wpa_supplicant openssh rsync reflector bridge-utils dnsmasq vde2 openbsd-netcat ebtables-nft iptables ipset firewalld
pacman -S --noconfirm base-devel linux-headers
pacman -S --noconfirm avahi xdg-user-dirs xdg-utils gvfs gvfs-smb nfs-utils inetutils dnsutils bluez bluez-utils cups hplip alsa-utils pulseaudio
pacman -S --noconfirm bash-completion  acpi acpi_call virt-manager qemu qemu-arch-extra edk2-ovmf flatpak sof-firmware nss-mdns acpid os-prober ntfs-3g terminus-font

# pacman -S --noconfirm xf86-video-amdgpu
pacman -S --noconfirm nvidia nvidia-utils nvidia-settings

grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg

systemctl enable NetworkManager
systemctl enable bluetooth
#systemctl enable cups.service
systemctl enable sshd
#systemctl enable avahi-daemon
#systemctl enable tlp # You can comment this command out if you didn't install tlp, see above
systemctl enable reflector.timer
systemctl enable fstrim.timer
#systemctl enable libvirtd
systemctl enable firewalld
#systemctl enable acpid

useradd -m chris
echo chris:password | chpasswd
usermod -aG libvirt chris

echo "chris ALL=(ALL) ALL" >> /etc/sudoers.d/chris

printf "\e[1;32mDone! Type exit, umount -a and reboot.\e[0m"
#+end_src
